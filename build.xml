<?xml version="1.0"?>
<project name="jspacal" default="dist" basedir=".">
	<description>Java Solar Position Algorithm CALculator</description>
	<property name="version" value="1.0"/>
	<property name="author" value="Przemyslaw Jacewicz"/>
	<property name="app.email" value="przemyslaw.jacewicz@gmail.com"/>

	<!-- dirs -->
	<property name="build.dir" value="build"/>
	  <property name="build.class.dir" value="${build.dir}/class"/>
	  <property name="build.test.dir" value="${build.dir}/test"/>
	<property name="dist.dir" value="dist"/>
	<property name="doc.dir" value="doc"/>
	  <property name="doc.javadoc.dir" value="${doc.dir}/javadoc"/>
	  <property name="doc.doxygen.dir" value="${doc.dir}/doxygen"/>
	<property name="etc.dir" value="etc"/>
	<property name="extralib.dir" value="extralib"/>
	<property name="lib.dir" value="lib"/>
	<property name="src.dir" value="src"/>
	<property name="test.dir" value="test"/>
	<property name="tmp.dir" value="tmp"/>
	  <property name="tmp.src.dir" value="${tmp.dir}/src"/>	
	  <property name="tmp.test.dir" value="${tmp.dir}/test"/>

	<!-- files -->
	<property name="copyright.file" value="${etc.dir}/COPYRIGHT"/>	
	<property name="readme.file" value="README.md"/>
	<property name="license.file" value="LICENSE"/>
	<property name="build.properties.file" value="${build.dir}/build.properties"/>
	<property name='doxygen.cfg.file' value="${etc.dir}/Doxyfile"/>
	<property name='jar.file' value='${dist.dir}/${ant.project.name}-${version}.jar'/> 

	<!-- time stamps -->	
	<tstamp>
		<format property='YEAR' pattern='yyyy'/>
	</tstamp>

	<!-- COPYRIGHT file -->
	<loadfile srcFile="${copyright.file}" property="copyright">
		<filterchain>
			<replacetokens>
				<token key="YEAR" value="${YEAR}"/>
				<token key="PROJECT" value="${ant.project.name}"/>
			</replacetokens>
		</filterchain>
	</loadfile>

	<!-- libs -->
	<path id='lib.path'>
		<fileset dir='${lib.dir}'>
			<include name='**/*.jar'/>
		</fileset>
	</path>
	<path id='extralib.path'>
		<fileset dir='${extralib.dir}'>
			<include name='**/*.jar'/>
		</fileset>
	</path>

	<!-- dist files -->
	<filelist id='dist.file.list' dir='${basedir}'>
		<file name='${license.file}'/>
		<file name='${readme.file}'/> 
	</filelist>

	<!-- INIT -->
	<target name='init' depends='clean' description='initialize project'>
		<mkdir dir='${build.dir}'/>
		  <mkdir dir='${build.class.dir}'/>
		  <mkdir dir='${build.test.dir}'/>
		<mkdir dir='${doc.dir}'/>
		  <mkdir dir='${doc.javadoc.dir}'/>
		  <mkdir dir='${doc.doxygen.dir}'/>
		<mkdir dir='${tmp.dir}'/>
		  <mkdir dir='${tmp.src.dir}'/>
		  <mkdir dir='${tmp.test.dir}'/>
	</target>

	<!-- BUILD -->
	<target name='build' depends='init' description='build project'>
		<copy todir='${tmp.src.dir}'>
			<fileset dir='${src.dir}' includes='**/*.java'/>
			<filterset>
				<filter token='COPYRIGHT' value='${copyright}'/>
			</filterset>
		</copy>

		<javac srcdir='${tmp.src.dir}' destdir='${build.class.dir}' classpathref='lib.path' debug='true' includeantruntime='false'>
			<include name='**/*.java'/>
			<exclude name='**/*test*'/>
			<exclude name='**/*Test*'/>
		</javac>

		<propertyfile file='${build.properties.file}' comment='Auto-generated with ant'>
			<entry key='Name' value='${ant.project.name}'/>
			<entry key='Version' value='${version}'/>
			<entry key='Author' value='${author}'/>
			<entry key='Contact' value='${app.email}'/>
		</propertyfile>
	</target>

	<pathconvert property='manifest.classpath' pathsep=' '>
		<path refid='lib.path'/>
		<mapper>
			<chainedmapper>
				<flattenmapper/>
				<globmapper from='*.jar' to='*.jar'/>
			</chainedmapper>
		</mapper>
	</pathconvert>	

	<!-- JAR -->
	<target name='jar' depends='build' description='create jar file'>
		<jar jarfile='${jar.file}' basedir='${build.class.dir}'>
			<manifest>
				<attribute name='Class-Path' value='${manifest.classpath}'/>
			</manifest>
		</jar>
		<checksum file='${jar.file}' forceOverwrite='yes'/>
	</target>

	<!-- DOC -->
	<target name='doc' depends='init' description='generate docs for project'>
		<taskdef name='doxygen' classname='org.doxygen.tools.DoxygenTask' classpathref='extralib.path'/>
		<doxygen configFilename='${doxygen.cfg.file}'/>
		<echo message='Documantation created in ${doc.dir}'/>
	</target>

	<!-- TAR.GZ -->
	<target name='tar.gz' depends='jar,doc' description='create dist files tar.gz archive'>
		<tar destfile='${dist.dir}/${ant.project.name}-${version}-src.tar.gz' compression='gzip'>
			<tarfileset dir='${doc.dir}' prefix='doc'/>
			<tarfileset dir='${tmp.src.dir}' prefix='src' includes='**/*.java'/>
			<tarfileset file='${jar.file}'/>
			<tarfileset dir='${lib.dir}' prefix='lib' includes='**/*.jar'/>
			<filelist refid='dist.file.list'/>
		</tar>
		<checksum file='${dist.dir}/${ant.project.name}-${version}-src.tar.gz' forceOverwrite='yes'/>
	</target>

	<!-- ZIP -->
	<target name='zip' depends='jar,doc' description='create dist files zip archive'>
		<zip destfile='${dist.dir}/${ant.project.name}-${version}-src.zip' update='true'>
			<zipfileset dir='${doc.dir}' prefix='doc'/>
			<zipfileset dir='${tmp.src.dir}' prefix='src' includes='**/*.java'/>
			<zipfileset file='${jar.file}'/>
			<filelist refid='dist.file.list'/>
		</zip>
		<checksum file='${dist.dir}/${ant.project.name}-${version}-src.zip' forceOverwrite='yes'/>
	</target>

	<!-- DIST -->
	<target name='dist' depends='jar,tar.gz,zip' description='make all dist files'/>
	
	<!-- BUILD TESTS -->
	<target name='build.test' depends='build' description='build project'>
		<copy todir='${tmp.test.dir}'>
			<fileset dir='${test.dir}' includes='**/*.java'/>
			<filterset>
				<filter token='COPYRIGHT' value='${copyright}'/>
			</filterset>
		</copy>

		<javac srcdir='${tmp.test.dir}' destdir='${build.test.dir}'  classpathref='extralib.path' includeantruntime='false'>
			<include name='**/*.java'/>
			<classpath location='${build.class.dir}'/>
		</javac>
	</target>

	<!-- EXECUTE TESTS -->
	<target name='execute.test' depends='build.test'>
		<mkdir dir='${dist.dir}/junit-report'/>
		<junit dir='${build.test.dir}' showoutput='true' printsummary='yes'>
			<classpath refid='extralib.path'/>
			<classpath location='${build.class.dir}'/>
			<formatter type='xml'/>
			<batchtest fork='yes' toDir='${dist.dir}/junit-report'>
				<fileset dir='${build.test.dir}' includes='**/*Test.class'/>
			</batchtest>
		</junit>
	</target>

	<!-- CLEAN UP -->
	<target name='clean' description='clean project'>
		<delete dir='${build.dir}'/>
		<delete dir='${dist.dir}'/>
		<delete dir='${doc.dir}'/>
		<delete dir='${tmp.dir}'/>
	</target>
</project>
